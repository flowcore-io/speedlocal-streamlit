name: Streamlit Build & Deploy (on Release)

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      tag:
        description: "Image/helm tag to use (e.g. v1.2.3)"
        required: true

env:
  AWS_REGION: eu-west-1
  AWS_ACCOUNT_ID: 305363105399
  IMAGE_REPO: speedlocal/streamlit-app
  # Multi-app deployment keys
  TIMES_APP_KEY: timesApp
  FLOW_MAPS_APP_KEY: flowMapsApp
  SANKEY_APP_KEY: sankeyApp
  DATABASE_APP_KEY: databaseApp
  PROD_VALUES: helm-chart/configuration/production.yaml

jobs:
  release-streamlit:
    name: Build image and update all app deployments
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.FLOWCORE_MACHINE_GITHUB_TOKEN }}
          fetch-depth: 0
          ref: main

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::305363105399:role/ECRGithubManager
          aws-region: eu-west-1
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names $IMAGE_REPO >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name $IMAGE_REPO

      - name: Resolve tag (release or manual)
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_REF_NAME: ${{ github.event.release.tag_name }}

      - name: Build image
        run: |
          REGISTRY="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          docker build -t $REGISTRY/$IMAGE_REPO:${{ steps.tag.outputs.tag }} streamlit-app

      - name: Push image
        run: |
          REGISTRY="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          docker push $REGISTRY/$IMAGE_REPO:${{ steps.tag.outputs.tag }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Update production Helm values with new tag for all apps
        run: |
          set -euo pipefail
          TAG="${{ steps.tag.outputs.tag }}"
          
          # Update all multi-app deployment tags
          echo "Updating all app deployments to tag $TAG"
          
          yq -i \
            '."flowcore-microservices".deployments."'"$TIMES_APP_KEY"'".deployment.tag = "'"$TAG"'"' \
            $PROD_VALUES
          echo "Updated TIMES Explorer app to tag $TAG"
          
          yq -i \
            '."flowcore-microservices".deployments."'"$FLOW_MAPS_APP_KEY"'".deployment.tag = "'"$TAG"'"' \
            $PROD_VALUES
          echo "Updated Energy Flow Maps app to tag $TAG"
          
          yq -i \
            '."flowcore-microservices".deployments."'"$SANKEY_APP_KEY"'".deployment.tag = "'"$TAG"'"' \
            $PROD_VALUES
          echo "Updated Sankey Diagrams app to tag $TAG"
          
          yq -i \
            '."flowcore-microservices".deployments."'"$DATABASE_APP_KEY"'".deployment.tag = "'"$TAG"'"' \
            $PROD_VALUES
          echo "Updated Database Tools app to tag $TAG"
          
          echo "Successfully updated all apps in $PROD_VALUES to tag $TAG"

      - name: Commit and push Helm change
        env:
          TAG: ${{ steps.tag.outputs.tag }}
        run: |
          set -euo pipefail
          git config --global user.email "flowcore_platform@flowcore.io"
          git config --global user.name "flowcore-machine"

          if git diff --quiet -- "${PROD_VALUES}"; then
            echo "No changes to commit; skipping push."
            exit 0
          fi

          git add "${PROD_VALUES}"
          git commit -m "fix(helm): :rocket: Update all app tags to ${TAG}"
          git push origin HEAD:main

          echo "Committed and pushed ${PROD_VALUES} with tag ${TAG}."



